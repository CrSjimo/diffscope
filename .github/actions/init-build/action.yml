name: Initialize Building Environment
description: Initialize Building Environment
inputs:
  os:
    description: OS
    required: true

runs:
  using: "composite"
  steps:
    - name: Setup devcmd
      if: inputs.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Install build tools (Windows)
      if: inputs.os == 'windows-latest'
      shell: pwsh
      run: |
        if ((Get-Command "ninja.exe" -ErrorAction SilentlyContinue) -eq $null)
        {
           choco install ninja
        }
        where.exe ninja
        ninja --version
        Write-Output VCPKG_TRIPLET=x64-windows >> $env:GITHUB_ENV
        Write-Output VCPKG_TRIPLET_STATIC=x64-windows-static-md >> $env:GITHUB_ENV
        Write-Output QT_ARCH=win64_msvc2019_64 >> $env:GITHUB_ENV

    - name: Install build tools (Ubuntu)
      if: inputs.os == 'ubuntu-latest'
      shell: pwsh
      run: |
        sudo apt update
        sudo apt-get -y install ninja-build libasound2-dev libxrandr-dev libxinerama-dev libxrender-dev libxcomposite-dev libxcursor-dev
        Write-Output VCPKG_TRIPLET=x64-linux >> $env:GITHUB_ENV
        Write-Output VCPKG_TRIPLET_STATIC=x64-linux >> $env:GITHUB_ENV
        Write-Output QT_ARCH=gcc_64 >> $env:GITHUB_ENV

    - name: Install build tools (macOS)
      if: inputs.os == 'macos-13'
      shell: pwsh
      env:
        HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: 1
        HOMEBREW_NO_INSTALL_CLEANUP: 1
      run: |
        brew update
        brew install ninja
        Write-Output VCPKG_TRIPLET=x64-osx >> $env:GITHUB_ENV
        Write-Output VCPKG_TRIPLET_STATIC=x64-osx >> $env:GITHUB_ENV
        Write-Output QT_ARCH=clang_64 >> $env:GITHUB_ENV

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.15.2'
        archives: ${{ inputs.os == 'ubuntu-latest' && 'icu qtbase' || 'qtbase' }} qtsvg qtdeclarative qtremoteobjects qttools
        cache: true

    - name: Restore vcpkg from cache
      id: cache_vcpkg
      uses: actions/cache/restore@v4
      with:
        path: ${{ github.workspace }}/vcpkg
        key: ${{ runner.os }}-vcpkg-${{ hashFiles('scripts/vcpkg-manifest/vcpkg.json', 'scripts/vcpkg/**') }}
        restore-keys: |
          ${{ runner.os }}-vcpkg-

    - name: Install vcpkg dependencies
      if: steps.cache_vcpkg.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        if (!(Test-Path vcpkg)) {
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          ${{ inputs.os == 'windows-latest' && './bootstrap-vcpkg.bat' || 'sh ./bootstrap-vcpkg.sh' }}
        } else {
          cd vcpkg
          git pull origin master
        }
        $env:QT_DIR="$env:Qt5_DIR/lib/cmake/Qt5"
        $env:Qt5_DIR=$env:QT_DIR
        $env:VCPKG_KEEP_ENV_VARS="QT_DIR;Qt5_DIR"
        ./vcpkg install `
          --x-manifest-root=${{ github.workspace }}/scripts/vcpkg-manifest `
          --x-install-root=./installed `
          --triplet=${{ env.VCPKG_TRIPLET }}
        if ($LASTEXITCODE -ne 0) {
          exit 1
        }
        ./vcpkg install `
          --x-manifest-root=${{ github.workspace }}/scripts/setup/diffscope-bridge `
          --x-install-root=./bridge_installed `
          --triplet=${{ env.VCPKG_TRIPLET_STATIC }}
        if (Test-Path -Path buildtrees) {
          Remove-Item -Path buildtrees -Recurse -Force
        }
        if (Test-Path -Path downloads) {
          Remove-Item -Path downloads -Recurse -Force
        }
        if (Test-Path -Path packages) {
          Remove-Item -Path packages -Recurse -Force
        }

    - name: Save vcpkg to cache
      if: steps.cache_vcpkg.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: ${{ github.workspace }}/vcpkg
        key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json') }}

    - name: Get ASIO SDK
      if: inputs.os == 'windows-latest'
      shell: pwsh
      run: |
        Invoke-WebRequest -Uri "https://raw.githubusercontent.com/CrSjimo/diffscope-ci-tools-mirror/refs/heads/main/asiosdk_2.3.3_2019-06-14.zip" -OutFile $env:RUNNER_TEMP/asiosdk.zip
        Expand-Archive -Path $env:RUNNER_TEMP/asiosdk.zip -DestinationPath $env:GITHUB_WORKSPACE
        Rename-Item -Path asiosdk_2.3.3_2019-06-14 -NewName asiosdk

    - name: Set directory variables
      shell: pwsh
      run: |
        Write-Output VCPKG_ROOT_DIR=$(Resolve-Path -Path ./vcpkg) >> $env:GITHUB_ENV

    - name: Set ASIO SDK directory variable (Windows)
      if: inputs.os == 'windows-latest'
      shell: pwsh
      run: |
        mv asiosdk ..
        Write-Output ASIOSDK_DIR=$(Resolve-Path -Path ../asiosdk) >> $env:GITHUB_ENV

    - name: Set ASIO SDK directory variable (Non-Windows)
      if: inputs.os != 'windows-latest'
      shell: pwsh
      run: |
        Write-Output ASIOSDK_DIR= >> $env:GITHUB_ENV